<?php

namespace backend\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "task".
 *
 * @property int $task_id
 * @property string $title
 * @property string $start
 * @property string $finish = Null
 * @property string $deadline
 * @property int $status_id
 * @property int $project_id

 *
 *
 * @property Status $status
 * @property Project $project

 */

class Task extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */


    public static function tableName()
    {
        return 'task';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'start', 'deadline', 'status_id', 'project_id'], 'required'],
            [['start', 'deadline'], 'safe'],
            [['status_id', 'project_id'], 'integer'],


            ['start', 'date', 'format'=>'php:Y-m-d'],
            ['deadline', 'date', 'format'=>'php:Y-m-d'],

            ['deadline', 'compare', 'compareAttribute' => 'start', 'operator' => '>=', 'enableClientValidation' => false],

            [['title'], 'string', 'max' => 255],
            [['status_id'], 'exist', 'skipOnError' => true, 'targetClass' => Status::className(), 'targetAttribute' => ['status_id' => 'status_id']],
            [['project_id'], 'exist', 'skipOnError' => true, 'targetClass' => Project::className(), 'targetAttribute' => ['project_id' => 'project_id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'task_id' => 'Task ID',
            'title' => 'Title',
            'start' => 'Start',
            'finish' => 'Date of Completion',
            'deadline' => 'Deadline',
            'status_id' => 'Status',
            'project_id' => 'Project',
            'status.name' => 'Status',
            'project.title' => 'Project',
            'doer_id' => 'Free employees:',
        ];
    }

    /**
     * Gets query for [[Status]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getStatus()
    {
        return $this->hasOne(Status::className(), ['status_id' => 'status_id']);
    }

    /**
     * Gets query for [[Project]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProject()
    {
        return $this->hasOne(Project::className(), ['project_id' => 'project_id']);
    }

    public function getDuration(){
        $finish = date_create($this->finish);
        $start = date_create($this->start);
        $duration = date_diff($finish, $start);
        return $duration->days.'d';
    }
    public function getEmployees()
    {
        $listCategory = Employee::find()->select(['employee_id','first_name'])->all();
        $list   = ArrayHelper::map( $listCategory,'ID','name');

        return $list;
    }

    public function beforeSave($insert)
    {
        if(!$insert){
            $oldVersion = Task::findOne(['task_id'=>$this->task_id]);
            if($oldVersion->status_id != $this->status_id && $this->status_id=='4')
                $this->finish = date('Y-m-d H:i:s');
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public function getIs_in_task(){
        $employee_id=Employee::findOne(['user_id'=>Yii::$app->user->getId()])->employee_id;
        if(Yii::$app->user->can('updateProject',
            ['project' => Project::findOne(['project_id'=>$this->project_id])->project_id])){
            return 'Manager';
        }
        if($verified = TaskEmployee::findOne(['task_id'=>$this->task_id, 'employee_id'=>$employee_id, 'verified'=>true])){
            return 'inBusiness';
        }
        if(TaskEmployee::findOne(['task_id'=>$this->task_id, 'employee_id'=>$employee_id, 'verified'=>'false'])){
            return 'toVerify';
        }
        return false;
    }
}
